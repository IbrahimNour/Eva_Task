{"version":3,"sources":["ng://ngx-number-spinner/lib/ngx-number-spinner/ngx-number-spinner.component.ts","ng://ngx-number-spinner/lib/ngx-number-spinner.module.ts"],"names":["NgxNumberSpinnerComponent","prototype","writeValue","value","this","registerOnChange","fn","_propagateChange","registerOnTouched","_onTouched","setDisabledState","isDisabled","disabled","inc","step","_onChange","dec","change","emit","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Input","Output","direction","EventEmitter","NgxNumberSpinnerModule","NgModule","declarations","exports","imports","CommonModule"],"mappings":"qYAAA,IAAAA,GAiCEA,EAAAC,UAAAC,WAAA,SAAWC,GACTC,KAAKD,MAAQA,GAAS,GAGxBH,EAAAC,UAAAI,iBAAA,SAAiBC,GACfF,KAAKG,iBAAmBD,GAG1BN,EAAAC,UAAAO,kBAAA,SAAkBF,GAChBF,KAAKK,WAAaH,GAGpBN,EAAAC,UAAAS,iBAAA,SAAkBC,GAChBP,KAAKQ,SAAWD,GAGlBX,EAAAC,UAAAY,IAAA,WACET,KAAKD,OAASC,KAAKU,KACnBV,KAAKW,aAGPf,EAAAC,UAAAe,IAAA,WACEZ,KAAKD,OAASC,KAAKU,KAEnBV,KAAKW,aAGCf,EAAAC,UAAAc,UAAR,WACEX,KAAKG,iBAAiBH,KAAKD,OAE3BC,KAAKa,OAAOC,KAAKd,KAAKD,4BA5DzBgB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAa,qBACbC,SAAA,y4BAIAC,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA3B,IAC9B4B,OAAO,mwDAKVC,EAAAA,MAAKT,KAAA,CAAC,uBACNS,EAAAA,MAAKT,KAAA,CAAC,qBACNS,EAAAA,MAAKT,KAAA,CAAC,oBACNS,EAAAA,MAAKT,KAAA,CAAC,0BACNS,EAAAA,MAAKT,KAAA,CAAC,6BAENU,EAAAA,OAAMV,KAAA,CAAC,aAyCVpB,GAlCE,SAAAA,IAbgBI,KAAAD,MAAgB,EACjBC,KAAAU,KAAe,EAGVV,KAAA2B,UAAqC,aAEvC3B,KAAAa,OAA+B,IAAIe,EAAAA,aAIrD5B,KAAAG,iBAAgB,aC5BlB,IAAA0B,uBAMCC,EAAAA,SAAQd,KAAA,CAAC,CACRe,aAAc,CACZnC,GAEFoC,QAAS,CACPpC,GAEFqC,QAAS,CACPC,EAAAA,kBAGkCL,GAXtC,SAAAA","sourcesContent":["import { Component, Input, EventEmitter, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector:    'ngx-number-spinner',\n  templateUrl: './ngx-number-spinner.component.html',\n  styleUrls: [\n    './ngx-number-spinner.component.scss'\n  ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxNumberSpinnerComponent),\n      multi: true\n    }\n  ]\n})\nexport class NgxNumberSpinnerComponent implements ControlValueAccessor {\n  @Input('value') value: number = 0;\n  @Input('step') step: number = 1;\n  @Input('min') min: number;\n  @Input('max') max: number;\n  @Input('direction') direction: 'horizontal'|'vertical' = 'horizontal';\n\n  @Output('change') change: EventEmitter<number> = new EventEmitter();\n\n  disabled: boolean;\n\n  _propagateChange:any = () => {};\n  _onTouched: () => void;\n\n  constructor() { }\n\n  writeValue(value:number):void {\n    this.value = value || 0;\n  }\n\n  registerOnChange(fn:any):void {\n    this._propagateChange = fn;\n  }\n\n  registerOnTouched(fn:any):void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled:boolean):void {\n    this.disabled = isDisabled;\n  }\n\n  inc():void {\n    this.value += this.step;\n    this._onChange();\n  }\n\n  dec():void {\n    this.value -= this.step;\n\n    this._onChange();\n  }\n\n  private _onChange():void {\n    this._propagateChange(this.value);\n\n    this.change.emit(this.value);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { NgxNumberSpinnerComponent } from './ngx-number-spinner/ngx-number-spinner.component';\n\n@NgModule({\n  declarations: [\n    NgxNumberSpinnerComponent\n  ],\n  exports: [\n    NgxNumberSpinnerComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class NgxNumberSpinnerModule { }\n"]}